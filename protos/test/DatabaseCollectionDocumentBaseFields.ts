// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: test/DatabaseCollectionDocumentBaseFields.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

/** Represents the default fields of any database document. */
export interface DatabaseCollectionDocumentBaseFields {
  /**
   * The ID of the document in the database.
   * The ID can be a UUID (36 chars, deprecated) or a Simplex Rapid ID (e.g., BRA_123e4567_e89b_12d3_a456_426614174000).
   */
  Id: string;
  /**
   * ISO 8601 creation date string.
   * Example: "2025-01-20T14:31:16.525Z"
   */
  CreatedDate: string;
  /**
   * ISO 8601 last update date string.
   * Example: "2025-02-12T10:15:00.000Z"
   */
  UpdatedDate: string;
  /** The unique identifier of the owner. Can be null. */
  Owner: string;
  _unknownFields?: { [key: number]: Uint8Array[] } | undefined;
}

function createBaseDatabaseCollectionDocumentBaseFields(): DatabaseCollectionDocumentBaseFields {
  return { Id: "", CreatedDate: "", UpdatedDate: "", Owner: "" };
}

export const DatabaseCollectionDocumentBaseFields: MessageFns<DatabaseCollectionDocumentBaseFields> = {
  encode(message: DatabaseCollectionDocumentBaseFields, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Id !== "") {
      writer.uint32(10).string(message.Id);
    }
    if (message.CreatedDate !== "") {
      writer.uint32(18).string(message.CreatedDate);
    }
    if (message.UpdatedDate !== "") {
      writer.uint32(26).string(message.UpdatedDate);
    }
    if (message.Owner !== "") {
      writer.uint32(34).string(message.Owner);
    }
    if (message._unknownFields !== undefined) {
      for (const [key, values] of Object.entries(message._unknownFields)) {
        const tag = parseInt(key, 10);
        for (const value of values) {
          writer.uint32(tag).raw(value);
        }
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatabaseCollectionDocumentBaseFields {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = Object.create(
      createBaseDatabaseCollectionDocumentBaseFields(),
    ) as DatabaseCollectionDocumentBaseFields;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.CreatedDate = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.UpdatedDate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.Owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      const buf = reader.skip(tag & 7);

      if (message._unknownFields === undefined) {
        message._unknownFields = {};
      }

      const list = message._unknownFields[tag];

      if (list === undefined) {
        message._unknownFields[tag] = [buf];
      } else {
        list.push(buf);
      }
    }
    return message;
  },

  fromJSON(object: any): DatabaseCollectionDocumentBaseFields {
    return {
      Id: isSet(object.Id) ? globalThis.String(object.Id) : "",
      CreatedDate: isSet(object.CreatedDate) ? globalThis.String(object.CreatedDate) : "",
      UpdatedDate: isSet(object.UpdatedDate) ? globalThis.String(object.UpdatedDate) : "",
      Owner: isSet(object.Owner) ? globalThis.String(object.Owner) : "",
    };
  },

  toJSON(message: DatabaseCollectionDocumentBaseFields): unknown {
    const obj: any = {};
    if (message.Id !== "") {
      obj.Id = message.Id;
    }
    if (message.CreatedDate !== "") {
      obj.CreatedDate = message.CreatedDate;
    }
    if (message.UpdatedDate !== "") {
      obj.UpdatedDate = message.UpdatedDate;
    }
    if (message.Owner !== "") {
      obj.Owner = message.Owner;
    }
    return obj;
  },

  create(base?: DeepPartial<DatabaseCollectionDocumentBaseFields>): DatabaseCollectionDocumentBaseFields {
    return DatabaseCollectionDocumentBaseFields.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DatabaseCollectionDocumentBaseFields>): DatabaseCollectionDocumentBaseFields {
    const message = Object.create(
      createBaseDatabaseCollectionDocumentBaseFields(),
    ) as DatabaseCollectionDocumentBaseFields;
    message.Id = object.Id ?? "";
    message.CreatedDate = object.CreatedDate ?? "";
    message.UpdatedDate = object.UpdatedDate ?? "";
    message.Owner = object.Owner ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
